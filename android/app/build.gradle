apply plugin: 'com.android.application'

android {
    sourceSets {
        main {
            assets.srcDirs += ['../../res/sprites']
        }
    }

    buildToolsVersion "31.0.0"
    compileSdkVersion 31
    ndkVersion "23.1.7779620"

    defaultConfig {
        applicationId "org.libsdl.totalgb"
        minSdkVersion 19
        targetSdkVersion 31
        versionCode(getBuildVersionCode())
        versionName "${getVersion()}"
        externalNativeBuild {
            cmake {
                arguments '-DCMAKE_BUILD_TYPE=RelWithDebInfo', '-DGB_SINGLE_FILE=ON', '-DPLATFORM_SDL2=ON'
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                // abiFilters 'arm64-v8a'
            }
        }
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = rootProject.file('key_release.properties')
            if (keystorePropertiesFile.exists()) {
                // when building locally, use signing properties from key_release.properties
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            } else {
                // when building CI server, use signing properties from environment variables
                keystoreProperties.setProperty('storePassword', System.getenv('ANDROID_RELEASE_KEY_STORE_PASSWORD'))
                keystoreProperties.setProperty('keyPassword', System.getenv('ANDROID_RELEASE_KEY_PASSWORD'))
                keystoreProperties.setProperty('keyAlias', System.getenv('ANDROID_RELEASE_KEY_ALIAS'))
                keystoreProperties.setProperty('storeFile', System.getenv('ANDROID_RELEASE_KEYSTORE_PATH'))
            }

            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }

        debug {
            // if file is found or building for CI, use same debug key
            def keystorePropertiesFile = rootProject.file('key_debug.properties')
            if (keystorePropertiesFile.exists() || System.getenv('ANDROID_DEBUG_KEYSTORE_PATH')) {
                def keystoreProperties = new Properties()
                if (keystorePropertiesFile.exists()) {
                    // when building locally, use signing properties from key_debug.properties
                    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                } else {
                    // when building CI server, use signing properties from environment variables
                    keystoreProperties.setProperty('storePassword', System.getenv('ANDROID_DEBUG_KEY_STORE_PASSWORD'))
                    keystoreProperties.setProperty('keyPassword', System.getenv('ANDROID_DEBUG_KEY_PASSWORD'))
                    keystoreProperties.setProperty('keyAlias', System.getenv('ANDROID_DEBUG_KEY_ALIAS'))
                    keystoreProperties.setProperty('storeFile', System.getenv('ANDROID_DEBUG_KEYSTORE_PATH'))
                }

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            // has to be disabled for now or else it crashes on startup
            // need to fix that as minify saves about 2mib
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        // the below is from dolphin!
        // Signed by debug key disallowing distribution on Play Store.
        // Attaches 'debug' suffix to version and package name, allowing installation alongside the release build.
        debug {
            signingConfig signingConfigs.debug

            applicationIdSuffix ".debug"
            versionNameSuffix '-debug'
            jniDebuggable true
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            cmake {
                version "3.18.0+"
                path '../../CMakeLists.txt'
            }
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
}

// the below is taken from dolphin-emu (thanks!)
// https://github.com/dolphin-emu/dolphin/blob/5d11dc1926a7c76d8cfcd11d995e24244bdd7e71/Source/Android/app/build.gradle#L117
def getVersion() {
    def versionNumber = '0.0'

    try {
        versionNumber = 'git describe --always --long'.execute([], project.rootDir).text
                .trim()
                .replaceAll(/(-0)?-[^-]+$/, "")
    } catch (Exception e) {
        logger.error(e + ': Cannot find git, defaulting to dummy version number')
    }

    return versionNumber
}


def getBuildVersionCode() {
    try {
        def versionNumber = 'git rev-list --first-parent --count HEAD'.execute([], project.rootDir).text
                .trim()
        return Integer.valueOf(versionNumber)
    } catch (Exception e) {
        logger.error(e + ': Cannot find git, defaulting to dummy version number')
    }

    return 1
}
